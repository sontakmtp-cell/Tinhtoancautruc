#!/usr/bin/env node

/**
 * Script t·∫°o cache version d·ª±a tr√™n Git commit hash
 * ƒê√¢y l√† gi·∫£i ph√°p ·ªïn ƒë·ªãnh h∆°n timestamp cho production
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const SERVICE_WORKER_PATH = path.join(process.cwd(), 'public', 'service-worker.js');

function updateCacheVersionWithGit() {
  try {
    // L·∫•y git commit hash
    let version;
    try {
      const gitHash = execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();
      const gitTimestamp = execSync('git log -1 --format=%ct', { encoding: 'utf8' }).trim();
      version = parseInt(gitTimestamp); // S·ª≠ d·ª•ng commit timestamp
      console.log(`üìã Git commit: ${gitHash}`);
    } catch (gitError) {
      // Fallback v·ªÅ timestamp n·∫øu kh√¥ng c√≥ git
      version = Math.floor(Date.now() / 1000);
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y Git, s·ª≠ d·ª•ng timestamp hi·ªán t·∫°i');
    }

    // ƒê·ªçc v√† c·∫≠p nh·∫≠t service worker
    if (!fs.existsSync(SERVICE_WORKER_PATH)) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y service-worker.js');
      process.exit(1);
    }

    let content = fs.readFileSync(SERVICE_WORKER_PATH, 'utf8');
    const cacheVersionRegex = /const\s+CACHE_VERSION\s*=\s*\d+;/;
    
    if (!cacheVersionRegex.test(content)) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y CACHE_VERSION trong service-worker.js');
      process.exit(1);
    }

    // L·∫•y version c≈©
    const oldVersionMatch = content.match(/const\s+CACHE_VERSION\s*=\s*(\d+);/);
    const oldVersion = oldVersionMatch ? oldVersionMatch[1] : 'unknown';

    // C·∫≠p nh·∫≠t version m·ªõi
    content = content.replace(cacheVersionRegex, `const CACHE_VERSION = ${version};`);
    fs.writeFileSync(SERVICE_WORKER_PATH, content, 'utf8');

    console.log('‚úÖ Cache version ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:');
    console.log(`   ${oldVersion} ‚Üí ${version}`);
    console.log(`   Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`);

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

// Export ƒë·ªÉ c√≥ th·ªÉ import t·ª´ script kh√°c
export default updateCacheVersionWithGit;

// Ch·∫°y n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  updateCacheVersionWithGit();
}
